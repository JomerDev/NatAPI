
New = function(self) -- Creates and returns a new instance of 'Eventself'
	local new = {}
	setmetatable(new, {__index = self})
	new.WEvents = {}
	new.KeyEvents = {}
	new.MonEvents = {}
	new.PerEvents = {}
	new.MiscEvents = {}
	new.RedEvents = {}
	-- Using Tables and Subtables to save methods. When a event is called which there is a method for, it should call this method. There could be many Methods for one Event!
	new.Methods = {}
	new.Methods.WEvents = {}
	new.Methods.KeyEvents = {}
	new.Methods.MonEvents = {}
	new.Methods.PerEvents = {}
	new.Methods.RedEvents = {}
	new.Methods.MiscEvents = {}
	
	return new
end

getNextEvent = function(self, _type) -- Returns the oldest Event in the specified Category
	if tostring(_type) == "WLan" then
		return table.remove(self.WEvents,1)
	elseif tostring(_type) == "Key" then
		return table.remove(self.KeyEvents,1)
	elseif tostring(_type) == "Red" then
		return table.remove(self.RedEvents,1)
	elseif tostring(_type) == "Mon" then
		return table.remove(self.MonEvents,1)
	elseif tostring(_type) == "Per" then
		return table.remove(self.PerEvents,1)
	elseif tostring(_type) == "Misc" then
		return table.remove(self.MiscEvents,1)
	end
end

listen = function(self) -- Starts up the EventHandler, has to be started in a coroutine!
	while true do
		local event = {os.pullEvent()}
		if event then
			if tostring(event[1]) == "modem_message" or tostring(event[1]) == "rednet_Message" then
				table.insert(self.WEvents, {event})
			elseif tostring(event[1]) == "char" or tostring(event[1]) == "key" then
				table.insert(self.KeyEvents, {event})
			elseif tostring(event[1]) == "mouse_click" or tostring(event[1]) == "mouse_scroll" or tostring(event[1]) == "mouse_drag" or tostring(event[1]) == "monitor_touch" or tostring(event[1]) == "monitor_resize" then
				table.insert(self.MonEvents,{event})
			elseif tostring(event[1]) == "redstone" or tostring(event[1]) == "prb_input" then
				table.insert(self.RedEvents,{event})
			elseif tostring(event[1]) == "peripheral" or tostring(event[1]) == "peripheral_detach" or tostring(event[1]) == "disk" or tostring(event[1]) == "disk_eject" then
				table.insert(self.PerEvents,{event})
			else
				table.insert(self.MiscEvents,{event})
			end
		end
	end
end

printOut = function(self, timer, line)
	while true do
		term.setCursorPos(1,line)
		for i=line,line+7 do
			term.setCursorPos(1,i)
			term.clearLine()
		end
		term.setCursorPos(1,line)
		print("Events")
		print("WEvents: "..tostring(textutils.serialize(self:getNextEvent("WLan"))))
		print("KeyEvents: "..tostring(textutils.serialize(self:getNextEvent("Key"))))
		print("MonEvents: "..tostring(textutils.serialize(self:getNextEvent("Mon"))))
		print("PerEvents: "..tostring(textutils.serialize(self:getNextEvent("Per"))))
		print("RedEvents: "..tostring(textutils.serialize(self:getNextEvent("Red"))))
		print("MiscEvents: "..tostring(textutils.serialize(self:getNextEvent("Misc"))))
		sleep(timer)
	end
end

addEventMethod = function(self, method, event, stay)
	if not stay then stay = true end
	-- Needs a way to save Methods in the tables (new.Methods.[whatever])
end
