
New = function(self) -- Creates and returns a new instance of 'EventHandler'
	local new = {}
	setmetatable(new, {__index = self})
	new.WEvents = {}
	new.KeyEvents = {}
	new.MonEvents = {}
	new.PerEvents = {}
	new.MiscEvents = {}
	new.RedEvents = {}
	
	return new
end

getNextEvent = function(self, _type) -- Returns the oldest Event in the specified Category
	if tostring(_type) == "WLan" then
		return table.remove(self.WEvents,1) or nil
	elseif tostring(_type) == "Key" then
		return table.remove(self.KeyEvents,1) or nil
	elseif tostring(_type) == "Red" then
		return table.remove(self.RedEvents,1) or nil
	elseif tostring(_type) == "Mon" then
		return table.remove(self.MonEvents,1) or nil
	elseif tostring(_type) == "Per" then
		return table.remove(self.PerEvents,1) or nil
	elseif tostring(_type) == "Misc" then
		return table.remove(self.MiscEvents,1) or nil
	end
end

listen = function(self) -- Starts up the EventHandler, has to be started in a coroutine!
	while true do
		local event = {os.pullEvent()}
		if event then
			if tostring(event[1]) == "modem_message" or tostring(event[1]) == "rednet_Message" then
				table.insert(self.WEvents, {event})
			elseif tostring(event[1]) == "char" or tostring(event[1]) == "key" then
				table.insert(self.KeyEvents, {event})
			elseif tostring(event[1]) == "mouse_click" or tostring(event[1]) == "mouse_scroll" or tostring(event[1]) == "mouse_drag" or tostring(event[1]) == "monitor_touch" or tostring(event[1]) == "monitor_resize" then
				table.insert(self.MonEvents,{event})
			elseif tostring(event[1]) == "redstone" or tostring(event[1]) == "prb_input" then
				table.insert(self.RedEvents,{event})
			elseif tostring(event[1]) == "peripheral" or tostring(event[1]) == "peripheral_detach" or tostring(event[1]) == "disk" or tostring(event[1]) == "disk_eject" then
				table.insert(self.PerEvents,{event})
			else
				table.insert(self.MiscEvents,{event})
			end
		end
	end
end

