os.loadAPI("out/Label")

local function findArg(args, sa)
	for i,v in pairs(args) do
		if sa == "m=" and tostring(type(v)) == "table" then
			return v
		end
		local x,y = string.find(tostring(v),tostring(sa))
		if x and y then
			return string.sub(tostring(v),y+1)
		end
	end
	return nil
end

New = function(self,...) -- Creates and returns a new instance of "list"
	local new = {}
	new.lables = {}	
	setmetatable(new, {__index = self})
	new.name = findArg(arg, "n=") or tostring("Menu")	
	new.x = tonumber(findArg(arg, "x=")) or 1
	new.y = tonumber(findArg(arg, "y=")) or 1
	new.width = tonumber(findArg(arg, "w=")) or string.len(tostring(new.name))
	new.width2 = tonumber(findArg(arg, "w2=")) or string.len(tostring(new.name))
	new.height = tonumber(findArg(arg, "h=")) or 1
	new.direction = findArg(arg, "d=") or "down"
	new.color_BG_ON = tonumber(findArg(arg, "cbg1=")) or colors.lightGray
	new.color_BG_DIS = tonumber(findArg(arg, "cbg3=")) or colors.gray
	new.color_TXT_ON = tonumber(findArg(arg, "ctx1=")) or colors.black
	new.color_TXT_DIS = tonumber(findArg(arg, "ctx3=")) or colors.white
	new.enabled = findArg(arg, "e=") or true
	new.state = false
	new.mon = findArg(arg, "m=") or term
	
	return new
end

addPoint = function(self, name) -- Adds a Button to the menu
	local x, y = 0,0
	if self.direction == "down" or self.direction == "up" then 
		x = self.x 
	elseif self.direction == "right" then 
		x = self.x + 1 + (#self.labels * self.width) 
	elseif self.direction == "left" then 
		x = self.x - 1 - (#self.labels * self.width) 
	end 
	if self.direction == "down" then 
		y = self.y + 1 + #self.labels 
	elseif self.direction == "up" then 
		y = self.y -1 - #self.labels
	elseif self.direction == "right" or self.direction == "left" then 
		y = self.y 
	end 
	if string.len(name) > self.width2 then
		name = string.sub(name, 1, self.width + 1)
	end
	local names = tostring("Label_"..#self.labels+1)
	names = Label:New("n="..tostring(name),"cbg1=256","cbg2=256","cbg3=128","ctx1=32768","ctx2=32768","ctx3=1",self.mon,"x="..x,"y="..y,"h=1","w="..string.len(name))
	table.insert(self.labels,names)
end

out = function(self) 
	if not self.state then
		self.mon.setBackgroundColor(tonumber(self.color_BG_DIS))
		if self.direction == "down" then
			for j=1,#self.labels do
				for k=0,self.width2 do
					self.mon.setCursorPos(self.x+k,self.y+j)
					self.mon.write(" ")
				end
			end
		elseif self.direction == "up" then
			for j=1,#self.labels do
				for k=0,self.width2 do
					self.mon.setCursorPos(self.x+k,self.y-j)
					self.mon.write(" ")
				end
			end
		end
		for i,v in pairs(self.labels) do
			v:show(self.mon)
		end
	end
	self.state = true
end

wasPressed = function(self,x,y) -- Checks if the menu was pressed !Needs Work!
	if x >= self.x and x <= (self.x + self.width ) and y >= self.y and y <= (self.y + self.height) then
		return true
	else
		return false
	end
end

show = function(self, mon) -- Writes the List out
	if not mon then mon = self.mon else self.mon = mon end
	if self.enabled then
		mon.setTextColor(self.color_TXT_ON)
		mon.setBackgroundColor(self.color_BG_ON)
	end
	mon.setCursorPos(self.x,self.y)
	for i=1,self.height do
		for j=1,self.width do
			mon.write(" ")
		end
		mon.setCursorPos(self.x,self.y + i)
	end
	local w = 0
	if self.width > string.len(self.name) then 
		w = (self.width - string.len(self.name))/2
	else
		w = 0
	end
	mon.setCursorPos(self.x + w,self.y + self.height/2)
	mon.write(tostring(self.name))
end
